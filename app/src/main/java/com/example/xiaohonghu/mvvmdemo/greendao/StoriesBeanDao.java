package com.example.xiaohonghu.mvvmdemo.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

import com.example.xiaohonghu.mvvmdemo.bean.StoriesBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORIES_BEAN".
*/
public class StoriesBeanDao extends AbstractDao<StoriesBean, Long> {

    public static final String TABLENAME = "STORIES_BEAN";

    /**
     * Properties of entity StoriesBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, int.class, "type", false, "TYPE");
        public final static Property StoryId = new Property(1, Long.class, "storyId", false, "STORY_ID");
        public final static Property Id = new Property(2, Long.class, "id", true, "_id");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Images = new Property(4, String.class, "images", false, "IMAGES");
    }

    private final StringConverter imagesConverter = new StringConverter();
    private Query<StoriesBean> newsListBean_StoriesQuery;

    public StoriesBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StoriesBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORIES_BEAN\" (" + //
                "\"TYPE\" INTEGER NOT NULL ," + // 0: type
                "\"STORY_ID\" INTEGER," + // 1: storyId
                "\"_id\" INTEGER PRIMARY KEY ," + // 2: id
                "\"TITLE\" TEXT," + // 3: title
                "\"IMAGES\" TEXT);"); // 4: images
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORIES_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoriesBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        Long storyId = entity.getStoryId();
        if (storyId != null) {
            stmt.bindLong(2, storyId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(5, imagesConverter.convertToDatabaseValue(images));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoriesBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        Long storyId = entity.getStoryId();
        if (storyId != null) {
            stmt.bindLong(2, storyId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(5, imagesConverter.convertToDatabaseValue(images));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2);
    }    

    @Override
    public StoriesBean readEntity(Cursor cursor, int offset) {
        StoriesBean entity = new StoriesBean( //
            cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // storyId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 4)) // images
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoriesBean entity, int offset) {
        entity.setType(cursor.getInt(offset + 0));
        entity.setStoryId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImages(cursor.isNull(offset + 4) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoriesBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoriesBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoriesBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stories" to-many relationship of NewsListBean. */
    public List<StoriesBean> _queryNewsListBean_Stories(Long storyId) {
        synchronized (this) {
            if (newsListBean_StoriesQuery == null) {
                QueryBuilder<StoriesBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StoryId.eq(null));
                newsListBean_StoriesQuery = queryBuilder.build();
            }
        }
        Query<StoriesBean> query = newsListBean_StoriesQuery.forCurrentThread();
        query.setParameter(0, storyId);
        return query.list();
    }

}
