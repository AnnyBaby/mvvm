package com.example.xiaohonghu.mvvmdemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.xiaohonghu.mvvmdemo.bean.NewsListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_LIST_BEAN".
*/
public class NewsListBeanDao extends AbstractDao<NewsListBean, Long> {

    public static final String TABLENAME = "NEWS_LIST_BEAN";

    /**
     * Properties of entity NewsListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Background = new Property(2, String.class, "background", false, "BACKGROUND");
        public final static Property Color = new Property(3, int.class, "color", false, "COLOR");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Image_source = new Property(6, String.class, "image_source", false, "IMAGE_SOURCE");
    }

    private DaoSession daoSession;


    public NewsListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DESCRIPTION\" TEXT," + // 1: description
                "\"BACKGROUND\" TEXT," + // 2: background
                "\"COLOR\" INTEGER NOT NULL ," + // 3: color
                "\"NAME\" TEXT," + // 4: name
                "\"IMAGE\" TEXT," + // 5: image
                "\"IMAGE_SOURCE\" TEXT);"); // 6: image_source
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(3, background);
        }
        stmt.bindLong(4, entity.getColor());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(7, image_source);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsListBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(3, background);
        }
        stmt.bindLong(4, entity.getColor());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        String image_source = entity.getImage_source();
        if (image_source != null) {
            stmt.bindString(7, image_source);
        }
    }

    @Override
    protected final void attachEntity(NewsListBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsListBean readEntity(Cursor cursor, int offset) {
        NewsListBean entity = new NewsListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // background
            cursor.getInt(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // image_source
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBackground(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColor(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage_source(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
